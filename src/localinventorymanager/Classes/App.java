/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package localinventorymanager.Classes;

import java.awt.Color;
import java.awt.Component;
import java.awt.Cursor;
import javax.swing.*;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

/**
 *
 * @author XD
 */
public class App extends javax.swing.JFrame {
    
    private final Color WHITE = new Color(255, 255, 255);
    private final Color RED = new Color(255, 0, 0);
    private final Color HOVER_COLOR = new Color(99, 190, 255);
    private final Color ORIGINAL_TEXT_COLOR = new Color(0, 102, 204);
    private final Cursor HAND = new Cursor(Cursor.HAND_CURSOR);
    private final Cursor NORMAL = new Cursor(Cursor.DEFAULT_CURSOR);
    private final int MAX_WINDOWS = 2;
    private int openWindows = 1;
    private int id = 0;
    private DefaultListModel<String> listModel = new DefaultListModel<>();
    private Map<Integer, Item> inventory = new HashMap<>();//key=name of the item; value=the object itself
    private final Set<JFrame> closedWindows = new HashSet<>();

    /**
     * Creates new form App
     */
    public App() {
        // TODO: Initialize the list by loading data from a JSON file on each execution.

        initComponents();
        products.setModel(listModel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        manageWindow = new javax.swing.JFrame();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        inventoryList = new javax.swing.JList<>();
        jTextField1 = new javax.swing.JTextField();
        buttonsPane1 = new javax.swing.JPanel();
        deleteItem = new javax.swing.JPanel();
        deleteItemTxt = new javax.swing.JLabel();
        editItem = new javax.swing.JPanel();
        editItemTxt = new javax.swing.JLabel();
        addItem = new javax.swing.JPanel();
        addItemTxt = new javax.swing.JLabel();
        search = new javax.swing.JPanel();
        searchTxt = new javax.swing.JLabel();
        quickSellWindow = new javax.swing.JFrame();
        rootQuickSell = new javax.swing.JPanel();
        ammountToSell = new javax.swing.JTextField();
        confirmSell = new javax.swing.JPanel();
        confirmSellTxt = new javax.swing.JLabel();
        ammountSelledLabel = new javax.swing.JLabel();
        quickStockWindow = new javax.swing.JFrame();
        rootQuickStock = new javax.swing.JPanel();
        ammountToStock = new javax.swing.JTextField();
        confirmStock = new javax.swing.JPanel();
        confirmStockTxt = new javax.swing.JLabel();
        ammountStockedLabel = new javax.swing.JLabel();
        addInventory = new javax.swing.JFrame();
        otherRoot = new javax.swing.JPanel();
        addInventoryRoot = new javax.swing.JPanel();
        name = new javax.swing.JTextField();
        description = new javax.swing.JTextField();
        category = new javax.swing.JTextField();
        stock = new javax.swing.JTextField();
        price = new javax.swing.JTextField();
        stockBound = new javax.swing.JTextField();
        supplier = new javax.swing.JTextField();
        nameLabel = new javax.swing.JLabel();
        addProduct = new javax.swing.JPanel();
        addProductTxt = new javax.swing.JLabel();
        descriptionLabel = new javax.swing.JLabel();
        categoryLabel = new javax.swing.JLabel();
        stockLabel = new javax.swing.JLabel();
        priceLabel = new javax.swing.JLabel();
        stockBoundLabel = new javax.swing.JLabel();
        supplierLabel = new javax.swing.JLabel();
        editInventory = new javax.swing.JFrame();
        otherRoot1 = new javax.swing.JPanel();
        addInventoryRoot1 = new javax.swing.JPanel();
        name1 = new javax.swing.JTextField();
        description1 = new javax.swing.JTextField();
        category1 = new javax.swing.JTextField();
        stock1 = new javax.swing.JTextField();
        price1 = new javax.swing.JTextField();
        stockBound1 = new javax.swing.JTextField();
        supplier1 = new javax.swing.JTextField();
        nameLabel1 = new javax.swing.JLabel();
        editProduct = new javax.swing.JPanel();
        editProductTxt = new javax.swing.JLabel();
        descriptionLabel1 = new javax.swing.JLabel();
        categoryLabel1 = new javax.swing.JLabel();
        stockLabel1 = new javax.swing.JLabel();
        priceLabel1 = new javax.swing.JLabel();
        stockBoundLabel1 = new javax.swing.JLabel();
        supplierLabel1 = new javax.swing.JLabel();
        root = new javax.swing.JPanel();
        mainContent = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        products = new javax.swing.JList<>();
        searchBar = new javax.swing.JTextField();
        searchButton = new javax.swing.JPanel();
        searchButtonTxt = new javax.swing.JLabel();
        buttonsPane = new javax.swing.JPanel();
        quickStock = new javax.swing.JPanel();
        quickStockTxt = new javax.swing.JLabel();
        quickSell = new javax.swing.JPanel();
        quickSellTxt = new javax.swing.JLabel();
        manage = new javax.swing.JPanel();
        manageTxt = new javax.swing.JLabel();
        itemInfoPane = new javax.swing.JScrollPane();
        itemInfoTxt = new javax.swing.JTextArea();

        manageWindow.getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        jPanel1.setBackground(new java.awt.Color(0, 102, 153));

        inventoryList.setBorder(null);
        jScrollPane2.setViewportView(inventoryList);

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        buttonsPane1.setBackground(new java.awt.Color(0, 102, 153));
        buttonsPane1.setForeground(new java.awt.Color(102, 255, 102));

        deleteItem.setBackground(new java.awt.Color(255, 255, 255));
        deleteItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteItemMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                deleteItemMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                deleteItemMouseExited(evt);
            }
        });
        deleteItem.setLayout(new java.awt.GridLayout(1, 0));

        deleteItemTxt.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        deleteItemTxt.setForeground(new java.awt.Color(0, 102, 204));
        deleteItemTxt.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        deleteItemTxt.setText("Delete item");
        deleteItem.add(deleteItemTxt);

        editItem.setBackground(new java.awt.Color(255, 255, 255));
        editItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                editItemMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                editItemMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                editItemMouseExited(evt);
            }
        });
        editItem.setLayout(new java.awt.GridLayout(1, 0));

        editItemTxt.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        editItemTxt.setForeground(new java.awt.Color(0, 102, 204));
        editItemTxt.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        editItemTxt.setText("Edit item");
        editItem.add(editItemTxt);

        addItem.setBackground(new java.awt.Color(255, 255, 255));
        addItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addItemMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                addItemMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                addItemMouseExited(evt);
            }
        });
        addItem.setLayout(new java.awt.GridLayout(1, 0));

        addItemTxt.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        addItemTxt.setForeground(new java.awt.Color(0, 102, 204));
        addItemTxt.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        addItemTxt.setText("Add item");
        addItem.add(addItemTxt);

        javax.swing.GroupLayout buttonsPane1Layout = new javax.swing.GroupLayout(buttonsPane1);
        buttonsPane1.setLayout(buttonsPane1Layout);
        buttonsPane1Layout.setHorizontalGroup(
            buttonsPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonsPane1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(deleteItem, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editItem, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addItem, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        buttonsPane1Layout.setVerticalGroup(
            buttonsPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonsPane1Layout.createSequentialGroup()
                .addGroup(buttonsPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(editItem, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(deleteItem, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addItem, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        search.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                searchMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                searchMouseExited(evt);
            }
        });
        search.setLayout(new java.awt.GridLayout(1, 0));

        searchTxt.setForeground(new java.awt.Color(0, 102, 204));
        searchTxt.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        searchTxt.setText("Search");
        search.add(searchTxt);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane2)
                    .addComponent(buttonsPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(search, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField1)
                    .addComponent(search, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(16, 16, 16)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 392, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(buttonsPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        manageWindow.getContentPane().add(jPanel1);

        inventoryList.setModel(listModel);

        quickSellWindow.getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        rootQuickSell.setBackground(new java.awt.Color(0, 102, 153));

        ammountToSell.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        ammountToSell.setForeground(new java.awt.Color(0, 102, 204));
        ammountToSell.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        confirmSell.setBackground(new java.awt.Color(255, 255, 255));
        confirmSell.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                confirmSellMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                confirmSellMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                confirmSellMouseExited(evt);
            }
        });
        confirmSell.setLayout(new java.awt.GridLayout(1, 0));

        confirmSellTxt.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        confirmSellTxt.setForeground(new java.awt.Color(0, 102, 204));
        confirmSellTxt.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        confirmSellTxt.setText("Confirm");
        confirmSell.add(confirmSellTxt);

        ammountSelledLabel.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        ammountSelledLabel.setForeground(new java.awt.Color(255, 255, 255));
        ammountSelledLabel.setText("Ammount retrieved");

        javax.swing.GroupLayout rootQuickSellLayout = new javax.swing.GroupLayout(rootQuickSell);
        rootQuickSell.setLayout(rootQuickSellLayout);
        rootQuickSellLayout.setHorizontalGroup(
            rootQuickSellLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rootQuickSellLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(rootQuickSellLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ammountToSell)
                    .addComponent(confirmSell, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, rootQuickSellLayout.createSequentialGroup()
                .addContainerGap(140, Short.MAX_VALUE)
                .addComponent(ammountSelledLabel)
                .addGap(151, 151, 151))
        );
        rootQuickSellLayout.setVerticalGroup(
            rootQuickSellLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, rootQuickSellLayout.createSequentialGroup()
                .addContainerGap(16, Short.MAX_VALUE)
                .addComponent(ammountSelledLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ammountToSell, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(confirmSell, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31))
        );

        quickSellWindow.getContentPane().add(rootQuickSell);

        quickStockWindow.getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        rootQuickStock.setBackground(new java.awt.Color(0, 102, 153));

        ammountToStock.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        ammountToStock.setForeground(new java.awt.Color(0, 102, 204));
        ammountToStock.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        confirmStock.setBackground(new java.awt.Color(255, 255, 255));
        confirmStock.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                confirmStockMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                confirmStockMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                confirmStockMouseExited(evt);
            }
        });
        confirmStock.setLayout(new java.awt.GridLayout(1, 0));

        confirmStockTxt.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        confirmStockTxt.setForeground(new java.awt.Color(0, 102, 204));
        confirmStockTxt.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        confirmStockTxt.setText("Confirm");
        confirmStock.add(confirmStockTxt);

        ammountStockedLabel.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        ammountStockedLabel.setForeground(new java.awt.Color(255, 255, 255));
        ammountStockedLabel.setText("Ammount added");

        javax.swing.GroupLayout rootQuickStockLayout = new javax.swing.GroupLayout(rootQuickStock);
        rootQuickStock.setLayout(rootQuickStockLayout);
        rootQuickStockLayout.setHorizontalGroup(
            rootQuickStockLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rootQuickStockLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(rootQuickStockLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ammountToStock, javax.swing.GroupLayout.DEFAULT_SIZE, 720, Short.MAX_VALUE)
                    .addComponent(confirmStock, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, rootQuickStockLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ammountStockedLabel)
                .addGap(131, 131, 131))
        );
        rootQuickStockLayout.setVerticalGroup(
            rootQuickStockLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, rootQuickStockLayout.createSequentialGroup()
                .addContainerGap(51, Short.MAX_VALUE)
                .addComponent(ammountStockedLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ammountToStock, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(confirmStock, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31))
        );

        quickStockWindow.getContentPane().add(rootQuickStock);

        addInventory.getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        otherRoot.setBackground(new java.awt.Color(0, 102, 153));
        otherRoot.setForeground(new java.awt.Color(0, 102, 153));

        addInventoryRoot.setBackground(new java.awt.Color(0, 102, 153));
        name.setText("");         description.setText("");         category.setText("");         stock.setText("");         price.setText("");         stockBound.setText("");         supplier.setText("");

        nameLabel.setForeground(new java.awt.Color(255, 255, 255));
        nameLabel.setText("Product Name");

        addProduct.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addProductMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                addProductMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                addProductMouseExited(evt);
            }
        });
        addProduct.setLayout(new java.awt.GridLayout(1, 0));

        addProductTxt.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        addProductTxt.setForeground(new java.awt.Color(0, 102, 204));
        addProductTxt.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        addProductTxt.setText("Add product");
        addProduct.add(addProductTxt);

        descriptionLabel.setForeground(new java.awt.Color(255, 255, 255));
        descriptionLabel.setText("Description");

        categoryLabel.setForeground(new java.awt.Color(255, 255, 255));
        categoryLabel.setText("Category");

        stockLabel.setForeground(new java.awt.Color(255, 255, 255));
        stockLabel.setText("Stock");

        priceLabel.setForeground(new java.awt.Color(255, 255, 255));
        priceLabel.setText("Price");

        stockBoundLabel.setForeground(new java.awt.Color(255, 255, 255));
        stockBoundLabel.setText("StockBound");

        supplierLabel.setForeground(new java.awt.Color(255, 255, 255));
        supplierLabel.setText("Supplier");

        javax.swing.GroupLayout addInventoryRootLayout = new javax.swing.GroupLayout(addInventoryRoot);
        addInventoryRoot.setLayout(addInventoryRootLayout);
        addInventoryRootLayout.setHorizontalGroup(
            addInventoryRootLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addInventoryRootLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addInventoryRootLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(price, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(supplier)
                    .addComponent(stockBound)
                    .addComponent(stock)
                    .addComponent(description)
                    .addComponent(name)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addInventoryRootLayout.createSequentialGroup()
                        .addGap(0, 367, Short.MAX_VALUE)
                        .addComponent(addProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(category)
                    .addGroup(addInventoryRootLayout.createSequentialGroup()
                        .addGroup(addInventoryRootLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(categoryLabel)
                            .addComponent(nameLabel)
                            .addComponent(descriptionLabel)
                            .addComponent(stockLabel)
                            .addComponent(priceLabel)
                            .addComponent(stockBoundLabel)
                            .addComponent(supplierLabel))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        addInventoryRootLayout.setVerticalGroup(
            addInventoryRootLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addInventoryRootLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(nameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(descriptionLabel)
                .addGap(2, 2, 2)
                .addComponent(description, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(categoryLabel)
                .addGap(2, 2, 2)
                .addComponent(category, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(stockLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(stock, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(priceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(price, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addComponent(stockBoundLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(stockBound, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(supplierLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addComponent(supplier, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(addProduct, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(220, Short.MAX_VALUE))
        );

        name.setText("");         
        description.setText("");         
        category.setText("");         
        stock.setText("");         
        price.setText("");         
        stockBound.setText("");
        supplier.setText("");

        javax.swing.GroupLayout otherRootLayout = new javax.swing.GroupLayout(otherRoot);
        otherRoot.setLayout(otherRootLayout);
        otherRootLayout.setHorizontalGroup(
            otherRootLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(otherRootLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addInventoryRoot, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        otherRootLayout.setVerticalGroup(
            otherRootLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(otherRootLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(addInventoryRoot, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        addInventory.getContentPane().add(otherRoot);

        editInventory.getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        otherRoot1.setBackground(new java.awt.Color(0, 102, 153));
        otherRoot1.setForeground(new java.awt.Color(0, 102, 153));

        addInventoryRoot1.setBackground(new java.awt.Color(0, 102, 153));

        nameLabel1.setForeground(new java.awt.Color(255, 255, 255));
        nameLabel1.setText("Product Name");

        editProduct.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                editProductMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                editProductMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                editProductMouseExited(evt);
            }
        });
        editProduct.setLayout(new java.awt.GridLayout(1, 0));

        editProductTxt.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        editProductTxt.setForeground(new java.awt.Color(0, 102, 204));
        editProductTxt.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        editProductTxt.setText("Edit product");
        editProduct.add(editProductTxt);

        descriptionLabel1.setForeground(new java.awt.Color(255, 255, 255));
        descriptionLabel1.setText("Description");

        categoryLabel1.setForeground(new java.awt.Color(255, 255, 255));
        categoryLabel1.setText("Category");

        stockLabel1.setForeground(new java.awt.Color(255, 255, 255));
        stockLabel1.setText("Stock");

        priceLabel1.setForeground(new java.awt.Color(255, 255, 255));
        priceLabel1.setText("Price");

        stockBoundLabel1.setForeground(new java.awt.Color(255, 255, 255));
        stockBoundLabel1.setText("StockBound");

        supplierLabel1.setForeground(new java.awt.Color(255, 255, 255));
        supplierLabel1.setText("Supplier");

        javax.swing.GroupLayout addInventoryRoot1Layout = new javax.swing.GroupLayout(addInventoryRoot1);
        addInventoryRoot1.setLayout(addInventoryRoot1Layout);
        addInventoryRoot1Layout.setHorizontalGroup(
            addInventoryRoot1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addInventoryRoot1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addInventoryRoot1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(price1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(supplier1)
                    .addComponent(stockBound1)
                    .addComponent(stock1)
                    .addComponent(description1)
                    .addComponent(name1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addInventoryRoot1Layout.createSequentialGroup()
                        .addGap(0, 367, Short.MAX_VALUE)
                        .addComponent(editProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(category1)
                    .addGroup(addInventoryRoot1Layout.createSequentialGroup()
                        .addGroup(addInventoryRoot1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(categoryLabel1)
                            .addComponent(nameLabel1)
                            .addComponent(descriptionLabel1)
                            .addComponent(stockLabel1)
                            .addComponent(priceLabel1)
                            .addComponent(stockBoundLabel1)
                            .addComponent(supplierLabel1))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        addInventoryRoot1Layout.setVerticalGroup(
            addInventoryRoot1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addInventoryRoot1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(nameLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(name1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(descriptionLabel1)
                .addGap(2, 2, 2)
                .addComponent(description1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(categoryLabel1)
                .addGap(2, 2, 2)
                .addComponent(category1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(stockLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(stock1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(priceLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(price1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addComponent(stockBoundLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(stockBound1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(supplierLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addComponent(supplier1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(editProduct, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(220, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout otherRoot1Layout = new javax.swing.GroupLayout(otherRoot1);
        otherRoot1.setLayout(otherRoot1Layout);
        otherRoot1Layout.setHorizontalGroup(
            otherRoot1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(otherRoot1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addInventoryRoot1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        otherRoot1Layout.setVerticalGroup(
            otherRoot1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(otherRoot1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(addInventoryRoot1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        editInventory.getContentPane().add(otherRoot1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        root.setBackground(new java.awt.Color(51, 0, 51));
        root.setLayout(new java.awt.BorderLayout());

        mainContent.setBackground(new java.awt.Color(0, 102, 153));
        mainContent.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        products.setBorder(null);
        products.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        products.setToolTipText("Products in inventory");
        products.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                productsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(products);

        mainContent.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 124, 498, 209));

        searchBar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchBarMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                searchBarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                searchBarMouseExited(evt);
            }
        });
        mainContent.add(searchBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 351, 353, 20));

        searchButton.setBackground(new java.awt.Color(255, 255, 255));
        searchButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                searchButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                searchButtonMouseExited(evt);
            }
        });
        searchButton.setLayout(new java.awt.GridLayout(1, 0));

        searchButtonTxt.setForeground(new java.awt.Color(0, 102, 204));
        searchButtonTxt.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        searchButtonTxt.setText("Search product");
        searchButton.add(searchButtonTxt);

        mainContent.add(searchButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(371, 351, 133, 22));

        buttonsPane.setBackground(new java.awt.Color(0, 102, 153));
        buttonsPane.setForeground(new java.awt.Color(102, 255, 102));

        quickStock.setBackground(new java.awt.Color(255, 255, 255));
        quickStock.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                quickStockMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                quickStockMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                quickStockMouseExited(evt);
            }
        });
        quickStock.setLayout(new java.awt.GridLayout(1, 0));

        quickStockTxt.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        quickStockTxt.setForeground(new java.awt.Color(0, 102, 204));
        quickStockTxt.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        quickStockTxt.setText("Quick stock");
        quickStock.add(quickStockTxt);

        quickSell.setBackground(new java.awt.Color(255, 255, 255));
        quickSell.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                quickSellMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                quickSellMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                quickSellMouseExited(evt);
            }
        });
        quickSell.setLayout(new java.awt.GridLayout(1, 0));

        quickSellTxt.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        quickSellTxt.setForeground(new java.awt.Color(0, 102, 204));
        quickSellTxt.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        quickSellTxt.setText("Quick retrieve");
        quickSell.add(quickSellTxt);

        manage.setBackground(new java.awt.Color(255, 255, 255));
        manage.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                manageMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                manageMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                manageMouseExited(evt);
            }
        });
        manage.setLayout(new java.awt.GridLayout(1, 0));

        manageTxt.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        manageTxt.setForeground(new java.awt.Color(0, 102, 204));
        manageTxt.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        manageTxt.setText("Manage");
        manage.add(manageTxt);

        javax.swing.GroupLayout buttonsPaneLayout = new javax.swing.GroupLayout(buttonsPane);
        buttonsPane.setLayout(buttonsPaneLayout);
        buttonsPaneLayout.setHorizontalGroup(
            buttonsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonsPaneLayout.createSequentialGroup()
                .addContainerGap(511, Short.MAX_VALUE)
                .addComponent(quickStock, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(quickSell, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(manage, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3))
        );
        buttonsPaneLayout.setVerticalGroup(
            buttonsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonsPaneLayout.createSequentialGroup()
                .addGroup(buttonsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(quickSell, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                    .addComponent(quickStock, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(manage, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        mainContent.add(buttonsPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 459, -1, 40));

        itemInfoPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        itemInfoPane.setToolTipText("");
        itemInfoPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        itemInfoTxt.setColumns(20);
        itemInfoTxt.setLineWrap(true);
        itemInfoTxt.setRows(5);
        itemInfoTxt.setWrapStyleWord(true);
        itemInfoTxt.setBorder(null);
        itemInfoTxt.setFocusable(false);
        itemInfoTxt.setRequestFocusEnabled(false);
        itemInfoTxt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                itemInfoTxtMouseEntered(evt);
            }
        });
        itemInfoPane.setViewportView(itemInfoTxt);

        mainContent.add(itemInfoPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 160, 380, 170));

        root.add(mainContent, java.awt.BorderLayout.CENTER);

        getContentPane().add(root);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchBarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchBarMouseEntered
        // TODO add your handling code here:

    }//GEN-LAST:event_searchBarMouseEntered

    private void searchBarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchBarMouseExited
        // TODO add your handling code here:

    }//GEN-LAST:event_searchBarMouseExited

    private void searchBarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchBarMouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_searchBarMouseClicked

    private void searchButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchButtonMouseEntered
        // TODO add your handling code here:
        buttonHoverBehaviour(searchButton, searchButtonTxt, HOVER_COLOR, WHITE);
    }//GEN-LAST:event_searchButtonMouseEntered

    private void searchButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchButtonMouseExited
        // TODO add your handling code here:
        buttonExitBehaviour(searchButton, searchButtonTxt, WHITE, ORIGINAL_TEXT_COLOR);
    }//GEN-LAST:event_searchButtonMouseExited

    private void quickStockMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_quickStockMouseEntered
        // TODO add your handling code here:
        buttonHoverBehaviour(quickStock, quickStockTxt, HOVER_COLOR, WHITE);
    }//GEN-LAST:event_quickStockMouseEntered

    private void quickStockMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_quickStockMouseExited
        // TODO add your handling code here:
        buttonExitBehaviour(quickStock, quickStockTxt, WHITE, ORIGINAL_TEXT_COLOR);
    }//GEN-LAST:event_quickStockMouseExited

    private void quickSellMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_quickSellMouseEntered
        // TODO add your handling code here:
        buttonHoverBehaviour(quickSell, quickSellTxt, HOVER_COLOR, WHITE);
    }//GEN-LAST:event_quickSellMouseEntered

    private void quickSellMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_quickSellMouseExited
        // TODO add your handling code here:
        buttonExitBehaviour(quickSell, quickSellTxt, WHITE, ORIGINAL_TEXT_COLOR);
    }//GEN-LAST:event_quickSellMouseExited

    private void manageMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_manageMouseEntered
        // TODO add your handling code here:
        buttonHoverBehaviour(manage, manageTxt, HOVER_COLOR, WHITE);
    }//GEN-LAST:event_manageMouseEntered

    private void manageMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_manageMouseExited
        // TODO add your handling code here:
        buttonExitBehaviour(manage, manageTxt, WHITE, ORIGINAL_TEXT_COLOR);
    }//GEN-LAST:event_manageMouseExited

    private void productsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_productsMouseClicked
        // TODO add your handling code here:
        displayInfo(products.getSelectedValue());

    }//GEN-LAST:event_productsMouseClicked

    private void quickStockMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_quickStockMouseClicked
        // TODO add your handling code here:
        if (products.getSelectedValue() != null) {
            openWindow(quickStockWindow, "Quick stock", 250, 500);
        } else {
            showError("Nothing selected");
        }
    }//GEN-LAST:event_quickStockMouseClicked

    private void manageMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_manageMouseClicked
        // TODO add your handling code here:
        openWindow(manageWindow, "Manage", 450, 450);
    }//GEN-LAST:event_manageMouseClicked

    private void quickSellMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_quickSellMouseClicked
        // TODO add your handling code here:
        if (products.getSelectedValue() != null) {
            openWindow(quickSellWindow, "Quick retrieve", 250, 500);
        } else {
            showError("Nothing selected");
        }
    }//GEN-LAST:event_quickSellMouseClicked

    private void itemInfoTxtMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_itemInfoTxtMouseEntered
        // TODO add your handling code here:
        itemInfoTxt.setCursor(NORMAL);
    }//GEN-LAST:event_itemInfoTxtMouseEntered

    private void deleteItemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteItemMouseClicked
        // TODO add your handling code here:
        deleteItem(inventoryList.getSelectedValue());

    }//GEN-LAST:event_deleteItemMouseClicked

    private void deleteItemMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteItemMouseEntered
        // TODO add your handling code here:
        buttonHoverBehaviour(deleteItem, deleteItemTxt, HOVER_COLOR, WHITE);
    }//GEN-LAST:event_deleteItemMouseEntered

    private void deleteItemMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteItemMouseExited
        // TODO add your handling code here:
        buttonExitBehaviour(deleteItem, deleteItemTxt, WHITE, ORIGINAL_TEXT_COLOR);
    }//GEN-LAST:event_deleteItemMouseExited

    private void editItemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editItemMouseClicked
        // TODO add your handling code here:
        if (inventoryList.getSelectedValue() != null) {
            openWindow(editInventory, "Edit item", 500, 500);
        } else {
            showError("Nothing selected");
        }

    }//GEN-LAST:event_editItemMouseClicked

    private void editItemMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editItemMouseEntered
        // TODO add your handling code here:
        buttonHoverBehaviour(editItem, editItemTxt, HOVER_COLOR, WHITE);
    }//GEN-LAST:event_editItemMouseEntered

    private void editItemMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editItemMouseExited
        // TODO add your handling code here:
        buttonExitBehaviour(editItem, editItemTxt, WHITE, ORIGINAL_TEXT_COLOR);
    }//GEN-LAST:event_editItemMouseExited

    private void addItemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addItemMouseClicked
        // TODO add your handling code here:
        openWindow(addInventory, "Add item", 500, 500);
    }//GEN-LAST:event_addItemMouseClicked

    private void addItemMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addItemMouseEntered
        // TODO add your handling code here:
        buttonHoverBehaviour(addItem, addItemTxt, HOVER_COLOR, WHITE);
    }//GEN-LAST:event_addItemMouseEntered

    private void addItemMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addItemMouseExited
        // TODO add your handling code here:
        buttonExitBehaviour(addItem, addItemTxt, WHITE, ORIGINAL_TEXT_COLOR);
    }//GEN-LAST:event_addItemMouseExited

    private void searchMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchMouseEntered
        // TODO add your handling code here:
        buttonHoverBehaviour(search, searchTxt, HOVER_COLOR, WHITE);
    }//GEN-LAST:event_searchMouseEntered

    private void searchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_searchMouseClicked

    private void searchMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchMouseExited
        // TODO add your handling code here:
        buttonExitBehaviour(search, searchTxt, WHITE, ORIGINAL_TEXT_COLOR);
    }//GEN-LAST:event_searchMouseExited

    private void confirmSellMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_confirmSellMouseClicked
        // TODO add your handling code here:
        if (validateQuickAction(products.getSelectedValue(), ammountToSell.getText())) {
            if (retrieve(products.getSelectedValue(), Integer.parseInt(ammountToSell.getText()))) {
                closeAfterOperation(confirmSell);
            }
            ammountToSell.setText("");
        }
    }//GEN-LAST:event_confirmSellMouseClicked

    private void confirmSellMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_confirmSellMouseEntered
        // TODO add your handling code here:
        buttonHoverBehaviour(confirmSell, confirmSellTxt, HOVER_COLOR, WHITE);
    }//GEN-LAST:event_confirmSellMouseEntered

    private void confirmSellMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_confirmSellMouseExited
        // TODO add your handling code here:
        buttonExitBehaviour(confirmSell, confirmSellTxt, WHITE, ORIGINAL_TEXT_COLOR);
    }//GEN-LAST:event_confirmSellMouseExited

    private void confirmStockMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_confirmStockMouseClicked
        // TODO add your handling code here:
        if (validateQuickAction(products.getSelectedValue(), ammountToStock.getText())) {
            stock(products.getSelectedValue(), ammountToStock.getText());
            ammountToStock.setText("");
            closeAfterOperation(confirmStock);
        }
    }//GEN-LAST:event_confirmStockMouseClicked

    private void confirmStockMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_confirmStockMouseEntered
        // TODO add your handling code here:
        buttonHoverBehaviour(confirmStock, confirmStockTxt, HOVER_COLOR, WHITE);
    }//GEN-LAST:event_confirmStockMouseEntered

    private void confirmStockMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_confirmStockMouseExited
        // TODO add your handling code here:
        buttonExitBehaviour(confirmStock, confirmStockTxt, WHITE, ORIGINAL_TEXT_COLOR);
    }//GEN-LAST:event_confirmStockMouseExited

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void addProductMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addProductMouseClicked
        // TODO add your handling code here:
        if (validItem(name.getText(), stock.getText(), price.getText())) {
            addItem(name.getText(), stock.getText(), price.getText());
            updateProducts();
            closeAfterOperation(addProduct);
            addCleanup();
        }
    }//GEN-LAST:event_addProductMouseClicked

    private void addProductMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addProductMouseEntered
        // TODO add your handling code here:
        buttonHoverBehaviour(addProduct, addProductTxt, HOVER_COLOR, WHITE);
    }//GEN-LAST:event_addProductMouseEntered

    private void addProductMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addProductMouseExited
        // TODO add your handling code here:
        buttonExitBehaviour(addProduct, addProductTxt, WHITE, ORIGINAL_TEXT_COLOR);
    }//GEN-LAST:event_addProductMouseExited

    private void editProductMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editProductMouseClicked
        // TODO add your handling code here:
        edit(inventoryList.getSelectedValue());
        updateCleanup();
    }//GEN-LAST:event_editProductMouseClicked

    private void editProductMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editProductMouseEntered
        // TODO add your handling code here:
        buttonHoverBehaviour(editProduct, editProductTxt, HOVER_COLOR, WHITE);
    }//GEN-LAST:event_editProductMouseEntered

    private void editProductMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editProductMouseExited
        // TODO add your handling code here:
        buttonExitBehaviour(editProduct, editProductTxt, WHITE, ORIGINAL_TEXT_COLOR);
    }//GEN-LAST:event_editProductMouseExited

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new App().setVisible(true);
            }
        });
    }

    /**
     * Applies hover animation to a button (JPanel).
     *
     * @param button The button panel.
     * @param text The label inside the button.
     * @param backgroundColor The background color when hovered.
     * @param textColor The text color when hovered.
     */
    private void buttonHoverBehaviour(JPanel button, JLabel text, Color backgroundColor, Color textColor) {
        button.setBackground(backgroundColor);
        button.setCursor(HAND);
        text.setForeground(textColor);
    }

    /**
     * Applies hover animation to a button (JPanel) when the cursor exits.
     *
     * @param button The button panel.
     * @param text The label inside the button.
     * @param backgroundColor The background color when the cursor exits.
     * @param textColor The text color when the cursor exits.
     */
    private void buttonExitBehaviour(JPanel button, JLabel text, Color backgroundColor, Color textColor) {
        
        button.setBackground(backgroundColor);
        text.setForeground(textColor);
    }

    /**
     * Opens a new JFrame from any button.
     *
     * @param window The target JFrame.
     * @param title The JFrame title.
     * @param height The JFrame height.
     * @param width The JFrame width.
     */
    private void openWindow(JFrame window, String title, int height, int width) {
        //    if(openWindows<MAX_WINDOWS){

        window.setSize(width, height);
        window.setLocationRelativeTo(null);
        window.setResizable(false);
        window.setTitle(title);
        overrideWindowClose(window);
        openWindows++;
        window.setVisible(true);//}else{
        //  JOptionPane.showMessageDialog(null,"You have an operation in process");
        // }

    }

    /**
     * Overrides default window close behaviour for a JFrame initialized with
     * openWindow. Asks the user to confirm before closing the JFrame.
     *
     * @param window The target JFrame.
     */
    private void overrideWindowClose(JFrame window) {
        if (closedWindows.contains(window)) {
            return;
        }
        closedWindows.add(window);
        window.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        window.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent e) {
                int result = JOptionPane.showConfirmDialog(window, "Do you really want to close this window?", "Confirm Exit", JOptionPane.YES_NO_OPTION);
                
                if (result == JOptionPane.YES_OPTION) {
                    openWindows--;
                    window.dispose();
                }
            }
            
        });
    }

    /**
     * Checks if a string is a valid float. Displays an error if it is not.
     *
     * @param number The string to evaluate.
     * @return true if the string is a valid float;false otherwise.
     */
    private boolean isFloat(String number) {
        if (number.trim().isEmpty()) {
            return false;
        }
        try {
            Float.valueOf(number.trim());
            return true;
            
        } catch (NumberFormatException e) {
            return false;
            
        }
    }

    /**
     * Checks if a string is a valid int.
     *
     * @param number The string to evaluate.
     * @return true if the string is a valid float;false otherwise.
     */
    private boolean isInt(String number) {
        try {
            int x = Integer.parseInt(number.trim());
            if (x > 0) {
                return true;
            }
        } catch (NumberFormatException e) {
            return false;
            
        }
        return false;
    }

    /**
     * Validates the information of an Item before adding it to the inventory.
     *
     * @param name the name of the item.
     * @param stock the ammount of units.
     * @param price the price.
     * @return true if the information is valid;false otherwise.
     */
    private boolean validItem(String name, String stock, String price) {
        if (name.trim().isEmpty()) {
            showError("The product must have a name");
            return false;
        }
        
        if (stock.trim().isEmpty()) {
            showError("The item must have a stock quantity");
            return false;
        }
        
        if (!isInt(stock)) {
            showError("The stock must be an integer");
            return false;
        }
        
        if (price.trim().isEmpty()) {
            showError("The item must have a price");
            return false;
        }
        
        if (!isFloat(price)) {
            showError("The price must be a decimal number");
            return false;
        }
        showInfo("The item has been added");
        return true;
    }

    /**
     * Shows an error message.
     *
     * @param message the message to display.
     */
    private void showMessage(String message, String title, int messageType) {
        JOptionPane.showMessageDialog(null, message, title, messageType);
        
    }
    
    private void showError(String message) {
        showMessage(message, "Error", JOptionPane.ERROR_MESSAGE);
        
    }
    
    private void showWarning(String message) {
        showMessage(message, "Warning", JOptionPane.WARNING_MESSAGE);
        
    }
    
    private void showInfo(String message) {
        showMessage(message, "Info", JOptionPane.INFORMATION_MESSAGE);
        
    }

    /**
     * Adds an Item object to the inventory.
     *
     * @param nameField the name of the item.
     * @param stockField the ammount of the item.
     * @param priceField the price of the item.
     */
    private void addItem(String nameField, String stockField, String priceField) {
        id++;
        boolean availability = Integer.parseInt(stock.getText()) > 0;
        inventory.put(id, new Item.Builder(id, nameField, Float.parseFloat(priceField), availability).stock(Integer.parseInt(stockField)).build());
    }
    
    private void updateProducts() {
        listModel.clear();
        for (Item product : inventory.values()) {
            listModel.addElement(product.getName() + " ID: " + product.getId());
            clearInfo();
        }
        
    }
    
    private void closeAfterOperation(Component component) {
        JFrame frame = (JFrame) SwingUtilities.getWindowAncestor(component);
        if (frame != null) {
            frame.dispose();
            
        }
        
    }
    
    private void addCleanup() {
        name.setText("");
        description.setText("");
        category.setText("");
        stock.setText("");
        price.setText("");
        stockBound.setText("");
        supplier.setText("");
        addProduct.setBackground(WHITE);
        addProductTxt.setForeground(ORIGINAL_TEXT_COLOR);
        
    }
    
    private void updateCleanup() {
        name1.setText("");
        description1.setText("");
        category1.setText("");
        stock1.setText("");
        price1.setText("");
        stockBound1.setText("");
        supplier1.setText("");
        editProduct.setBackground(WHITE);
        editProductTxt.setForeground(ORIGINAL_TEXT_COLOR);
        
    }
    
    private void deleteItem(String item) {
        int itemId = extractId(item);
        if (itemId > -1) {
            inventory.remove(itemId);
            updateProducts();
            clearInfo();
        } else {
            showError("Nothing selected");
        }
    }
    
    private void edit(String item) {
        int itemId = extractId(item);
        if (itemId > -1) {
            modifyItem(inventory.get(itemId));
            updateProducts();
            clearInfo();
            closeAfterOperation(editProduct);
        } else {
            showError("Nothing selected");
        }
        
    }
    
    private int extractId(String item) {
        if (item != null && !item.isEmpty()) {
            final String breakpoint = " ID: ";
            int index = item.lastIndexOf(breakpoint);
            String itemId = item.substring(index + breakpoint.length()).trim();
            return Integer.parseInt(itemId);
        } else {
            return -1;
        }
        
    }
    
    private void modifyItem(Item item) {
        if (!name1.getText().trim().isEmpty()) {
            item.setName(name1.getText());
        }
        
        if (!description1.getText().trim().isEmpty()) {
            item.setDescription(description1.getText());
        }
        
        if (!category1.getText().trim().isEmpty()) {
            item.setCategory(category1.getText());
        }
        
        if (!stock1.getText().trim().isEmpty() && isInt(stock1.getText())) {
            item.setStock(Integer.parseInt(stock1.getText()));
        }
        
        if (!price1.getText().trim().isEmpty() && isFloat(price1.getText())) {
            item.setPrice(Float.parseFloat(price1.getText()));
        }
        
        if (!stockBound1.getText().trim().isEmpty() && isInt(stockBound1.getText())) {
            item.setStockBound(Integer.parseInt(stockBound1.getText()));
        }
        
        if (!supplier1.getText().trim().isEmpty()) {
            item.setSupplier(supplier1.getText());
        }
    }
    
    private boolean retrieve(String item, int amount) {
        int itemId = extractId(item);
        int available = inventory.get(itemId).getStock();
        if (amount <= available) {
            inventory.get(itemId).setStock(available - amount);
            showInfo("The new stock for " + inventory.get(itemId).getName() + " is now " + inventory.get(itemId).getStock());
            
        } else if (available == 0) {
            showWarning("There is no more stock left for " + inventory.get(itemId).getName());
            inventory.get(itemId).setStatus(false);
            return false;
        } else {
            showError("There are only " + inventory.get(itemId).getStock() + " " + inventory.get(itemId).getName() + " in stock");
            return false;
            
        }
        return true;
    }
    
    private boolean validateQuickAction(String selection, String ammount) {
        if (selection == null) {
            showError("Nothing selected");
            return false;
        }
        if (!isInt(ammount)) {
            showError("The amount must be an integer bigger than 0");
            return false;
            
        }
        if (ammount.trim().isEmpty()) {
            showError("You must introduce an amount");
            return false;
        }
        clearInfo();
        return true;
    }
    
    private void stock(String selection, String amount) {
        int itemId = extractId(selection);
        int currentStock = inventory.get(itemId).getStock();
        inventory.get(itemId).setStock(currentStock + Integer.parseInt(amount));
        if (inventory.get(itemId).getStatus() == false) {
            inventory.get(itemId).setStatus(true);
            
        }
        showInfo("The new stock for " + inventory.get(itemId).getName() + " is now " + inventory.get(itemId).getStock());
        
    }

    private void displayInfo(String selection) {
        int itemId = extractId(selection);
        itemInfoTxt.setText(inventory.get(itemId).toString());
    }

    private void clearInfo() {
        itemInfoTxt.setText("");
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFrame addInventory;
    private javax.swing.JPanel addInventoryRoot;
    private javax.swing.JPanel addInventoryRoot1;
    private javax.swing.JPanel addItem;
    private javax.swing.JLabel addItemTxt;
    private javax.swing.JPanel addProduct;
    private javax.swing.JLabel addProductTxt;
    private javax.swing.JLabel ammountSelledLabel;
    private javax.swing.JLabel ammountStockedLabel;
    private javax.swing.JTextField ammountToSell;
    private javax.swing.JTextField ammountToStock;
    private javax.swing.JPanel buttonsPane;
    private javax.swing.JPanel buttonsPane1;
    private javax.swing.JTextField category;
    private javax.swing.JTextField category1;
    private javax.swing.JLabel categoryLabel;
    private javax.swing.JLabel categoryLabel1;
    private javax.swing.JPanel confirmSell;
    private javax.swing.JLabel confirmSellTxt;
    private javax.swing.JPanel confirmStock;
    private javax.swing.JLabel confirmStockTxt;
    private javax.swing.JPanel deleteItem;
    private javax.swing.JLabel deleteItemTxt;
    private javax.swing.JTextField description;
    private javax.swing.JTextField description1;
    private javax.swing.JLabel descriptionLabel;
    private javax.swing.JLabel descriptionLabel1;
    private javax.swing.JFrame editInventory;
    private javax.swing.JPanel editItem;
    private javax.swing.JLabel editItemTxt;
    private javax.swing.JPanel editProduct;
    private javax.swing.JLabel editProductTxt;
    private javax.swing.JList<String> inventoryList;
    private javax.swing.JScrollPane itemInfoPane;
    private javax.swing.JTextArea itemInfoTxt;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JPanel mainContent;
    private javax.swing.JPanel manage;
    private javax.swing.JLabel manageTxt;
    private javax.swing.JFrame manageWindow;
    private javax.swing.JTextField name;
    private javax.swing.JTextField name1;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JLabel nameLabel1;
    private javax.swing.JPanel otherRoot;
    private javax.swing.JPanel otherRoot1;
    private javax.swing.JTextField price;
    private javax.swing.JTextField price1;
    private javax.swing.JLabel priceLabel;
    private javax.swing.JLabel priceLabel1;
    private javax.swing.JList<String> products;
    private javax.swing.JPanel quickSell;
    private javax.swing.JLabel quickSellTxt;
    private javax.swing.JFrame quickSellWindow;
    private javax.swing.JPanel quickStock;
    private javax.swing.JLabel quickStockTxt;
    private javax.swing.JFrame quickStockWindow;
    private javax.swing.JPanel root;
    private javax.swing.JPanel rootQuickSell;
    private javax.swing.JPanel rootQuickStock;
    private javax.swing.JPanel search;
    private javax.swing.JTextField searchBar;
    private javax.swing.JPanel searchButton;
    private javax.swing.JLabel searchButtonTxt;
    private javax.swing.JLabel searchTxt;
    private javax.swing.JTextField stock;
    private javax.swing.JTextField stock1;
    private javax.swing.JTextField stockBound;
    private javax.swing.JTextField stockBound1;
    private javax.swing.JLabel stockBoundLabel;
    private javax.swing.JLabel stockBoundLabel1;
    private javax.swing.JLabel stockLabel;
    private javax.swing.JLabel stockLabel1;
    private javax.swing.JTextField supplier;
    private javax.swing.JTextField supplier1;
    private javax.swing.JLabel supplierLabel;
    private javax.swing.JLabel supplierLabel1;
    // End of variables declaration//GEN-END:variables
}
